//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""f13ca8e5-ea3c-413f-abbe-9fd233149074"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""24150440-d397-446c-86ea-ef20207fd038"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ability One"",
                    ""type"": ""Button"",
                    ""id"": ""f6870536-209f-41c5-bdb4-237eebb8006a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability Two"",
                    ""type"": ""Button"",
                    ""id"": ""473a4311-efc3-4bac-96c3-ac8ffc126aa3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability Three"",
                    ""type"": ""Button"",
                    ""id"": ""665b6419-d021-4c90-8213-e67683618018"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability Four"",
                    ""type"": ""Button"",
                    ""id"": ""93227800-0b72-497a-b734-d422d737a800"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability Defense"",
                    ""type"": ""Button"",
                    ""id"": ""86df09ce-7932-4ed2-a2fd-066e90b6e46b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spell"",
                    ""type"": ""Button"",
                    ""id"": ""17df92d0-9106-4721-b627-c343594d244b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""58ac8540-222d-457c-8b08-91ea76e525d7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Assist"",
                    ""type"": ""Button"",
                    ""id"": ""4cedeb1b-e8ae-4239-93e3-f95501800eb5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3b375501-93a4-423d-ab0e-335d41c8f242"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""86aa3eec-65a3-4696-a74f-744e58eea773"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bc125020-a6fc-4841-af3e-4b47f3404609"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7d25ea33-7aa2-4ba4-a6f2-84a7111fcbb6"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability One"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7de54528-c084-4fd2-b8e7-76d26c9afb1f"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability Two"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc7da343-e1e3-401b-821b-9879f1a7a0d1"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability Three"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04d74f9f-6708-4c34-b245-3783a4d2d1be"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability Four"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab7956a3-0ceb-43a2-83b2-eb890a3fc9b3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability Defense"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba9a7e15-f478-4a71-9a1e-0af8d14ff108"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7da6bb63-918b-4691-be97-3d62d0c5912b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1df699a-6fc9-4b4b-8d75-e7f64c5e5603"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Assist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Alternate"",
            ""id"": ""c621472a-8456-471c-adbd-9919682ed070"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a7d87587-070b-46b1-bfbd-7edfbb7b0b67"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5b6fbfda-49c6-471e-8964-ffd55ff3712a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f556e7b2-fd41-40be-a4c9-0d0e1a044eb1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4959669a-20bf-47f2-9b6c-23bc52b59e7e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3cb9942d-5076-45a0-bc50-43eb741bd755"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b2c73750-217b-4190-8fe3-69617b23c248"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_Movement = m_General.FindAction("Movement", throwIfNotFound: true);
        m_General_AbilityOne = m_General.FindAction("Ability One", throwIfNotFound: true);
        m_General_AbilityTwo = m_General.FindAction("Ability Two", throwIfNotFound: true);
        m_General_AbilityThree = m_General.FindAction("Ability Three", throwIfNotFound: true);
        m_General_AbilityFour = m_General.FindAction("Ability Four", throwIfNotFound: true);
        m_General_AbilityDefense = m_General.FindAction("Ability Defense", throwIfNotFound: true);
        m_General_Spell = m_General.FindAction("Spell", throwIfNotFound: true);
        m_General_Switch = m_General.FindAction("Switch", throwIfNotFound: true);
        m_General_Assist = m_General.FindAction("Assist", throwIfNotFound: true);
        // Alternate
        m_Alternate = asset.FindActionMap("Alternate", throwIfNotFound: true);
        m_Alternate_Movement = m_Alternate.FindAction("Movement", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_General.enabled, "This will cause a leak and performance issues, Controls.General.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Alternate.enabled, "This will cause a leak and performance issues, Controls.Alternate.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private List<IGeneralActions> m_GeneralActionsCallbackInterfaces = new List<IGeneralActions>();
    private readonly InputAction m_General_Movement;
    private readonly InputAction m_General_AbilityOne;
    private readonly InputAction m_General_AbilityTwo;
    private readonly InputAction m_General_AbilityThree;
    private readonly InputAction m_General_AbilityFour;
    private readonly InputAction m_General_AbilityDefense;
    private readonly InputAction m_General_Spell;
    private readonly InputAction m_General_Switch;
    private readonly InputAction m_General_Assist;
    public struct GeneralActions
    {
        private @Controls m_Wrapper;
        public GeneralActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_General_Movement;
        public InputAction @AbilityOne => m_Wrapper.m_General_AbilityOne;
        public InputAction @AbilityTwo => m_Wrapper.m_General_AbilityTwo;
        public InputAction @AbilityThree => m_Wrapper.m_General_AbilityThree;
        public InputAction @AbilityFour => m_Wrapper.m_General_AbilityFour;
        public InputAction @AbilityDefense => m_Wrapper.m_General_AbilityDefense;
        public InputAction @Spell => m_Wrapper.m_General_Spell;
        public InputAction @Switch => m_Wrapper.m_General_Switch;
        public InputAction @Assist => m_Wrapper.m_General_Assist;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void AddCallbacks(IGeneralActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @AbilityOne.started += instance.OnAbilityOne;
            @AbilityOne.performed += instance.OnAbilityOne;
            @AbilityOne.canceled += instance.OnAbilityOne;
            @AbilityTwo.started += instance.OnAbilityTwo;
            @AbilityTwo.performed += instance.OnAbilityTwo;
            @AbilityTwo.canceled += instance.OnAbilityTwo;
            @AbilityThree.started += instance.OnAbilityThree;
            @AbilityThree.performed += instance.OnAbilityThree;
            @AbilityThree.canceled += instance.OnAbilityThree;
            @AbilityFour.started += instance.OnAbilityFour;
            @AbilityFour.performed += instance.OnAbilityFour;
            @AbilityFour.canceled += instance.OnAbilityFour;
            @AbilityDefense.started += instance.OnAbilityDefense;
            @AbilityDefense.performed += instance.OnAbilityDefense;
            @AbilityDefense.canceled += instance.OnAbilityDefense;
            @Spell.started += instance.OnSpell;
            @Spell.performed += instance.OnSpell;
            @Spell.canceled += instance.OnSpell;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
            @Assist.started += instance.OnAssist;
            @Assist.performed += instance.OnAssist;
            @Assist.canceled += instance.OnAssist;
        }

        private void UnregisterCallbacks(IGeneralActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @AbilityOne.started -= instance.OnAbilityOne;
            @AbilityOne.performed -= instance.OnAbilityOne;
            @AbilityOne.canceled -= instance.OnAbilityOne;
            @AbilityTwo.started -= instance.OnAbilityTwo;
            @AbilityTwo.performed -= instance.OnAbilityTwo;
            @AbilityTwo.canceled -= instance.OnAbilityTwo;
            @AbilityThree.started -= instance.OnAbilityThree;
            @AbilityThree.performed -= instance.OnAbilityThree;
            @AbilityThree.canceled -= instance.OnAbilityThree;
            @AbilityFour.started -= instance.OnAbilityFour;
            @AbilityFour.performed -= instance.OnAbilityFour;
            @AbilityFour.canceled -= instance.OnAbilityFour;
            @AbilityDefense.started -= instance.OnAbilityDefense;
            @AbilityDefense.performed -= instance.OnAbilityDefense;
            @AbilityDefense.canceled -= instance.OnAbilityDefense;
            @Spell.started -= instance.OnSpell;
            @Spell.performed -= instance.OnSpell;
            @Spell.canceled -= instance.OnSpell;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
            @Assist.started -= instance.OnAssist;
            @Assist.performed -= instance.OnAssist;
            @Assist.canceled -= instance.OnAssist;
        }

        public void RemoveCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneralActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Alternate
    private readonly InputActionMap m_Alternate;
    private List<IAlternateActions> m_AlternateActionsCallbackInterfaces = new List<IAlternateActions>();
    private readonly InputAction m_Alternate_Movement;
    public struct AlternateActions
    {
        private @Controls m_Wrapper;
        public AlternateActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Alternate_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Alternate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AlternateActions set) { return set.Get(); }
        public void AddCallbacks(IAlternateActions instance)
        {
            if (instance == null || m_Wrapper.m_AlternateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AlternateActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IAlternateActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IAlternateActions instance)
        {
            if (m_Wrapper.m_AlternateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAlternateActions instance)
        {
            foreach (var item in m_Wrapper.m_AlternateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AlternateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AlternateActions @Alternate => new AlternateActions(this);
    public interface IGeneralActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAbilityOne(InputAction.CallbackContext context);
        void OnAbilityTwo(InputAction.CallbackContext context);
        void OnAbilityThree(InputAction.CallbackContext context);
        void OnAbilityFour(InputAction.CallbackContext context);
        void OnAbilityDefense(InputAction.CallbackContext context);
        void OnSpell(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
        void OnAssist(InputAction.CallbackContext context);
    }
    public interface IAlternateActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
